{"version":3,"sources":["webpack:///./node_modules/@writewithocto/ink/dist/es/turtle-44a81d65.js"],"names":["curPunc","wordRegexp","words","RegExp","join","keywords","operatorChars","tokenBase","stream","state","ch","next","match","tokenize","tokenLiteral","test","skipToEnd","eatWhile","peek","word","current","quote","escaped","pushContext","type","col","context","prev","indent","popContext","turtle","startState","token","sol","align","indentation","eatSpace","style","column","textAfter","cx","firstChar","charAt","closing","unit","languageData","commentTokens","line"],"mappings":"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","file":"js/chunk-2d0aeb55.ca97714e.js","sourcesContent":["var curPunc;\n\nfunction wordRegexp(words) {\n  return new RegExp(\"^(?:\" + words.join(\"|\") + \")$\", \"i\");\n}\nwordRegexp([]);\nvar keywords = wordRegexp([\"@prefix\", \"@base\", \"a\"]);\nvar operatorChars = /[*+\\-<>=&|]/;\n\nfunction tokenBase(stream, state) {\n  var ch = stream.next();\n  curPunc = null;\n  if (ch == \"<\" && !stream.match(/^[\\s\\u00a0=]/, false)) {\n    stream.match(/^[^\\s\\u00a0>]*>?/);\n    return \"atom\";\n  }\n  else if (ch == \"\\\"\" || ch == \"'\") {\n    state.tokenize = tokenLiteral(ch);\n    return state.tokenize(stream, state);\n  }\n  else if (/[{}\\(\\),\\.;\\[\\]]/.test(ch)) {\n    curPunc = ch;\n    return null;\n  }\n  else if (ch == \"#\") {\n    stream.skipToEnd();\n    return \"comment\";\n  }\n  else if (operatorChars.test(ch)) {\n    stream.eatWhile(operatorChars);\n    return null;\n  }\n  else if (ch == \":\") {\n    return \"operator\";\n  } else {\n    stream.eatWhile(/[_\\w\\d]/);\n    if(stream.peek() == \":\") {\n      return \"variableName.special\";\n    } else {\n      var word = stream.current();\n\n      if(keywords.test(word)) {\n        return \"meta\";\n      }\n\n      if(ch >= \"A\" && ch <= \"Z\") {\n        return \"comment\";\n      } else {\n        return \"keyword\";\n      }\n    }\n    var word = stream.current();\n  }\n}\n\nfunction tokenLiteral(quote) {\n  return function(stream, state) {\n    var escaped = false, ch;\n    while ((ch = stream.next()) != null) {\n      if (ch == quote && !escaped) {\n        state.tokenize = tokenBase;\n        break;\n      }\n      escaped = !escaped && ch == \"\\\\\";\n    }\n    return \"string\";\n  };\n}\n\nfunction pushContext(state, type, col) {\n  state.context = {prev: state.context, indent: state.indent, col: col, type: type};\n}\nfunction popContext(state) {\n  state.indent = state.context.indent;\n  state.context = state.context.prev;\n}\n\nconst turtle = {\n  startState: function() {\n    return {tokenize: tokenBase,\n            context: null,\n            indent: 0,\n            col: 0};\n  },\n\n  token: function(stream, state) {\n    if (stream.sol()) {\n      if (state.context && state.context.align == null) state.context.align = false;\n      state.indent = stream.indentation();\n    }\n    if (stream.eatSpace()) return null;\n    var style = state.tokenize(stream, state);\n\n    if (style != \"comment\" && state.context && state.context.align == null && state.context.type != \"pattern\") {\n      state.context.align = true;\n    }\n\n    if (curPunc == \"(\") pushContext(state, \")\", stream.column());\n    else if (curPunc == \"[\") pushContext(state, \"]\", stream.column());\n    else if (curPunc == \"{\") pushContext(state, \"}\", stream.column());\n    else if (/[\\]\\}\\)]/.test(curPunc)) {\n      while (state.context && state.context.type == \"pattern\") popContext(state);\n      if (state.context && curPunc == state.context.type) popContext(state);\n    }\n    else if (curPunc == \".\" && state.context && state.context.type == \"pattern\") popContext(state);\n    else if (/atom|string|variable/.test(style) && state.context) {\n      if (/[\\}\\]]/.test(state.context.type))\n        pushContext(state, \"pattern\", stream.column());\n      else if (state.context.type == \"pattern\" && !state.context.align) {\n        state.context.align = true;\n        state.context.col = stream.column();\n      }\n    }\n\n    return style;\n  },\n\n  indent: function(state, textAfter, cx) {\n    var firstChar = textAfter && textAfter.charAt(0);\n    var context = state.context;\n    if (/[\\]\\}]/.test(firstChar))\n      while (context && context.type == \"pattern\") context = context.prev;\n\n    var closing = context && firstChar == context.type;\n    if (!context)\n      return 0;\n    else if (context.type == \"pattern\")\n      return context.col;\n    else if (context.align)\n      return context.col + (closing ? 0 : 1);\n    else\n      return context.indent + (closing ? 0 : cx.unit);\n  },\n\n  languageData: {\n    commentTokens: {line: \"#\"}\n  }\n};\n\nexport { turtle };\n"],"sourceRoot":""}