{"version":3,"sources":["webpack:///./node_modules/@writewithocto/ink/dist/es/solr-0019076e.js"],"names":["isStringChar","isOperatorChar","isOperatorString","isNumber","word","parseFloat","toString","tokenString","quote","stream","state","next","escaped","tokenize","tokenBase","tokenOperator","operator","eat","tokenWord","ch","peek","match","test","solr","startState","token","eatSpace"],"mappings":"0MAAIA,EAAe,4CACfC,EAAiB,uBACjBC,EAAmB,qBAEvB,SAASC,EAASC,GAChB,OAAOC,WAAWD,GAAME,aAAeF,EAGzC,SAASG,EAAYC,GACnB,OAAO,SAASC,EAAQC,GACtB,IAAqBC,EAAjBC,GAAU,EACd,MAAiC,OAAzBD,EAAOF,EAAOE,QAAiB,CACrC,GAAIA,GAAQH,IAAUI,EAAS,MAC/BA,GAAWA,GAAmB,MAARD,EAIxB,OADKC,IAASF,EAAMG,SAAWC,GACxB,UAIX,SAASC,EAAcC,GACrB,OAAO,SAASP,EAAQC,GAOtB,MANgB,KAAZM,EACFP,EAAOQ,IAAI,MACQ,KAAZD,GACPP,EAAOQ,IAAI,MAEbP,EAAMG,SAAWC,EACV,YAIX,SAASI,EAAUC,GACjB,OAAO,SAASV,EAAQC,GACtB,IAAIN,EAAOe,EACX,OAAQA,EAAKV,EAAOW,SAAqC,MAA1BD,EAAGE,MAAMrB,GACtCI,GAAQK,EAAOE,OAIjB,OADAD,EAAMG,SAAWC,EACbZ,EAAiBoB,KAAKlB,GACjB,WACAD,EAASC,GACT,SACiB,KAAjBK,EAAOW,OACP,eAEA,UAIb,SAASN,EAAUL,EAAQC,GACzB,IAAIS,EAAKV,EAAOE,OAQhB,MAPU,KAANQ,EACFT,EAAMG,SAAWN,EAAYY,GACtBlB,EAAeqB,KAAKH,GAC3BT,EAAMG,SAAWE,EAAcI,GACxBnB,EAAasB,KAAKH,KACzBT,EAAMG,SAAWK,EAAUC,IAErBT,EAAMG,UAAYC,EAAaJ,EAAMG,SAASJ,EAAQC,GAAS,KAGzE,IAAMa,EAAO,CACXC,WAAY,WACV,MAAO,CACLX,SAAUC,IAIdW,MAAO,SAAShB,EAAQC,GACtB,OAAID,EAAOiB,WAAmB,KACvBhB,EAAMG,SAASJ,EAAQC","file":"js/chunk-2d0daf41.7005fc31.js","sourcesContent":["var isStringChar = /[^\\s\\|\\!\\+\\-\\*\\?\\~\\^\\&\\:\\(\\)\\[\\]\\{\\}\\\"\\\\]/;\nvar isOperatorChar = /[\\|\\!\\+\\-\\*\\?\\~\\^\\&]/;\nvar isOperatorString = /^(OR|AND|NOT|TO)$/i;\n\nfunction isNumber(word) {\n  return parseFloat(word).toString() === word;\n}\n\nfunction tokenString(quote) {\n  return function(stream, state) {\n    var escaped = false, next;\n    while ((next = stream.next()) != null) {\n      if (next == quote && !escaped) break;\n      escaped = !escaped && next == \"\\\\\";\n    }\n\n    if (!escaped) state.tokenize = tokenBase;\n    return \"string\";\n  };\n}\n\nfunction tokenOperator(operator) {\n  return function(stream, state) {\n    if (operator == \"|\")\n      stream.eat(/\\|/);\n    else if (operator == \"&\")\n      stream.eat(/\\&/);\n\n    state.tokenize = tokenBase;\n    return \"operator\";\n  };\n}\n\nfunction tokenWord(ch) {\n  return function(stream, state) {\n    var word = ch;\n    while ((ch = stream.peek()) && ch.match(isStringChar) != null) {\n      word += stream.next();\n    }\n\n    state.tokenize = tokenBase;\n    if (isOperatorString.test(word))\n      return \"operator\";\n    else if (isNumber(word))\n      return \"number\";\n    else if (stream.peek() == \":\")\n      return \"propertyName\";\n    else\n      return \"string\";\n  };\n}\n\nfunction tokenBase(stream, state) {\n  var ch = stream.next();\n  if (ch == '\"')\n    state.tokenize = tokenString(ch);\n  else if (isOperatorChar.test(ch))\n    state.tokenize = tokenOperator(ch);\n  else if (isStringChar.test(ch))\n    state.tokenize = tokenWord(ch);\n\n  return (state.tokenize != tokenBase) ? state.tokenize(stream, state) : null;\n}\n\nconst solr = {\n  startState: function() {\n    return {\n      tokenize: tokenBase\n    };\n  },\n\n  token: function(stream, state) {\n    if (stream.eatSpace()) return null;\n    return state.tokenize(stream, state);\n  }\n};\n\nexport { solr };\n"],"sourceRoot":""}