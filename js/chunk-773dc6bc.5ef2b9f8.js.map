{"version":3,"sources":["webpack:///./node_modules/@writewithocto/ink/dist/es/index-07f815fb.js"],"names":["parser","Parser","deserialize","version","states","stateData","goto","nodeNames","maxTerm","nodeProps","NodeProp","openedBy","closedBy","skippedNodes","repeatNodeCount","tokenData","tokenizers","topRules","tokenPrec","jsonParseLinter","view","JSON","parse","state","doc","toString","e","SyntaxError","pos","getErrorPosition","from","message","severity","to","error","m","match","Math","min","length","line","jsonLanguage","LezerLanguage","define","configure","props","indentNodeProp","add","Object","continuedIndent","except","Array","foldNodeProp","foldInside","styleTags","String","tags","string","Number","number","bool","PropertyName","propertyName","null","separator","squareBracket","brace","languageData","closeBrackets","brackets","indentOnInput","json","LanguageSupport"],"mappings":"kTAGMA,EAASC,OAAOC,YAAY,CAChCC,QAAS,GACTC,OAAQ,mRACRC,UAAW,iGACXC,KAAM,kFACNC,UAAW,sFACXC,QAAS,GACTC,UAAW,CACT,CAACC,OAASC,SAAU,EAAE,IAAI,GAAG,KAC7B,CAACD,OAASE,SAAU,EAAE,IAAI,GAAG,MAE/BC,aAAc,CAAC,GACfC,gBAAiB,EACjBC,UAAW,wkBACXC,WAAY,CAAC,GACbC,SAAU,CAAC,SAAW,CAAC,EAAE,IACzBC,UAAW,IAOPC,EAAkB,kBAAM,SAACC,GAC3B,IACIC,KAAKC,MAAMF,EAAKG,MAAMC,IAAIC,YAE9B,MAAOC,GACH,KAAMA,aAAaC,aACf,MAAMD,EACV,IAAME,EAAMC,EAAiBH,EAAGN,EAAKG,MAAMC,KAC3C,MAAO,CAAC,CACAM,KAAMF,EACNG,QAASL,EAAEK,QACXC,SAAU,QACVC,GAAIL,IAGhB,MAAO,KAEX,SAASC,EAAiBK,EAAOV,GAC7B,IAAIW,EACJ,OAAIA,EAAID,EAAMH,QAAQK,MAAM,sBACjBC,KAAKC,KAAKH,EAAE,GAAIX,EAAIe,SAC3BJ,EAAID,EAAMH,QAAQK,MAAM,+BACjBC,KAAKC,IAAId,EAAIgB,MAAML,EAAE,IAAIL,OAASK,EAAE,GAAM,EAAGX,EAAIe,QACrD,EAIX,IAAME,EAAeC,OAAcC,OAAO,CACtC3C,OAAQA,EAAO4C,UAAU,CACrBC,MAAO,CACHC,OAAeC,IAAI,CACfC,OAAQC,eAAgB,CAAEC,OAAQ,WAClCC,MAAOF,eAAgB,CAAEC,OAAQ,aAErCE,OAAaL,IAAI,CACb,eAAgBM,SAEpBC,eAAU,CACNC,OAAQC,OAAKC,OACbC,OAAQF,OAAKG,OACb,aAAcH,OAAKI,KACnBC,aAAcL,OAAKM,aACnBC,KAAMP,OAAKO,KACX,IAAKP,OAAKQ,UACV,MAAOR,OAAKS,cACZ,MAAOT,OAAKU,WAIxBC,aAAc,CACVC,cAAe,CAAEC,SAAU,CAAC,IAAK,IAAK,MACtCC,cAAe,iBAIvB,SAASC,IACL,OAAO,IAAIC,OAAgB/B","file":"js/chunk-773dc6bc.5ef2b9f8.js","sourcesContent":["import { P as Parser, o as NodeProp, j as LezerLanguage, e as indentNodeProp, f as continuedIndent, h as foldNodeProp, q as foldInside, a as styleTags, t as tags, n as LanguageSupport } from './index-8d5ff86c.js';\n\n// This file was generated by lezer-generator. You probably shouldn't edit it.\nconst parser = Parser.deserialize({\n  version: 13,\n  states: \"$bOVQPOOOOQO'#Cb'#CbOnQPO'#CeOvQPO'#CjOOQO'#Cp'#CpQOQPOOOOQO'#Cg'#CgO}QPO'#CfO!SQPO'#CrOOQO,59P,59PO![QPO,59PO!aQPO'#CuOOQO,59U,59UO!iQPO,59UOVQPO,59QOqQPO'#CkO!nQPO,59^OOQO1G.k1G.kOVQPO'#ClO!vQPO,59aOOQO1G.p1G.pOOQO1G.l1G.lOOQO,59V,59VOOQO-E6i-E6iOOQO,59W,59WOOQO-E6j-E6j\",\n  stateData: \"#O~OcOS~OQSORSOSSOTSOWQO]ROePO~OVXOeUO~O[[O~PVOg^O~Oh_OVfX~OVaO~OhbO[iX~O[dO~Oh_OVfa~OhbO[ia~O\",\n  goto: \"!kjPPPPPPkPPkqwPPk{!RPPP!XP!ePP!hXSOR^bQWQRf_TVQ_Q`WRg`QcZRicQTOQZRQe^RhbRYQR]R\",\n  nodeNames: \"âš  JsonText True False Null Number String } { Object Property PropertyName ] [ Array\",\n  maxTerm: 25,\n  nodeProps: [\n    [NodeProp.openedBy, 7,\"{\",12,\"[\"],\n    [NodeProp.closedBy, 8,\"}\",13,\"]\"]\n  ],\n  skippedNodes: [0],\n  repeatNodeCount: 2,\n  tokenData: \"(p~RaXY!WYZ!W]^!Wpq!Wrs!]|}$i}!O$n!Q!R$w!R![&V![!]&h!}#O&m#P#Q&r#Y#Z&w#b#c'f#h#i'}#o#p(f#q#r(k~!]Oc~~!`Upq!]qr!]rs!rs#O!]#O#P!w#P~!]~!wOe~~!zXrs!]!P!Q!]#O#P!]#U#V!]#Y#Z!]#b#c!]#f#g!]#h#i!]#i#j#g~#jR!Q![#s!c!i#s#T#Z#s~#vR!Q![$P!c!i$P#T#Z$P~$SR!Q![$]!c!i$]#T#Z$]~$`R!Q![!]!c!i!]#T#Z!]~$nOh~~$qQ!Q!R$w!R![&V~$|RT~!O!P%V!g!h%k#X#Y%k~%YP!Q![%]~%bRT~!Q![%]!g!h%k#X#Y%k~%nR{|%w}!O%w!Q![%}~%zP!Q![%}~&SPT~!Q![%}~&[ST~!O!P%V!Q![&V!g!h%k#X#Y%k~&mOg~~&rO]~~&wO[~~&zP#T#U&}~'QP#`#a'T~'WP#g#h'Z~'^P#X#Y'a~'fOR~~'iP#i#j'l~'oP#`#a'r~'uP#`#a'x~'}OS~~(QP#f#g(T~(WP#i#j(Z~(^P#X#Y(a~(fOQ~~(kOW~~(pOV~\",\n  tokenizers: [0],\n  topRules: {\"JsonText\":[0,1]},\n  tokenPrec: 0\n});\n\n/// Calls\n/// [`JSON.parse`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/parse)\n/// on the document and, if that throws an error, reports it as a\n/// single diagnostic.\nconst jsonParseLinter = () => (view) => {\n    try {\n        JSON.parse(view.state.doc.toString());\n    }\n    catch (e) {\n        if (!(e instanceof SyntaxError))\n            throw e;\n        const pos = getErrorPosition(e, view.state.doc);\n        return [{\n                from: pos,\n                message: e.message,\n                severity: 'error',\n                to: pos\n            }];\n    }\n    return [];\n};\nfunction getErrorPosition(error, doc) {\n    let m;\n    if (m = error.message.match(/at position (\\d+)/))\n        return Math.min(+m[1], doc.length);\n    if (m = error.message.match(/at line (\\d+) column (\\d+)/))\n        return Math.min(doc.line(+m[1]).from + (+m[2]) - 1, doc.length);\n    return 0;\n}\n\n/// A language provider that provides JSON parsing.\nconst jsonLanguage = LezerLanguage.define({\n    parser: parser.configure({\n        props: [\n            indentNodeProp.add({\n                Object: continuedIndent({ except: /^\\s*\\}/ }),\n                Array: continuedIndent({ except: /^\\s*\\]/ })\n            }),\n            foldNodeProp.add({\n                \"Object Array\": foldInside\n            }),\n            styleTags({\n                String: tags.string,\n                Number: tags.number,\n                \"True False\": tags.bool,\n                PropertyName: tags.propertyName,\n                null: tags.null,\n                \",\": tags.separator,\n                \"[ ]\": tags.squareBracket,\n                \"{ }\": tags.brace\n            })\n        ]\n    }),\n    languageData: {\n        closeBrackets: { brackets: [\"[\", \"{\", '\"'] },\n        indentOnInput: /^\\s*[\\}\\]]$/\n    }\n});\n/// JSON language support.\nfunction json() {\n    return new LanguageSupport(jsonLanguage);\n}\n\nexport { json, jsonLanguage, jsonParseLinter };\n"],"sourceRoot":""}